CREATE OR REPLACE PROCEDURE DATABRIDGE_DEV_DB.LSDB_TRANSFM.PRC_PERODIC_COLUMN_VALUE_CHECK(begin_date date, end_date date)
RETURNS VARCHAR NOT NULL
LANGUAGE SQL 
AS 
--EXECUTE IMMEDIATE 
$$

DECLARE

v_begin_date DATE ;
v_end_date DATE ;
C1 CURSOR FOR (SELECT TABLE_NAME_STG, 
                      PRIMARY_KEY_NAME_STG,
                      COLUMN_NAME_STG,
                      MODIFIED_DATE_COLUMN_NAME_STG,
                      TABLE_NAME_TRANSFM, 
                      CORR_PRIMARY_KEY_OF_STG_IN_TRANSFM, 
                      CORR_COLUMN_NAME_TRANSFM, 
                      CORR_MODIFIED_DATE_COLUMN_NAME_TRANSFM 
                FROM DATABRIDGE_DEV_DB.LSDB_TRANSFM.DC_STG_TRANSFM_MAPPING );

stg_sql_statement VARCHAR ;
transfm_sql_statement VARCHAR ;



BEGIN 

v_begin_date := COALESCE(begin_date,DATEADD('DAY',-14,DATE(CURRENT_TIMESTAMP())));
v_end_date := COALESCE(end_date,DATEADD('DAY',-1,DATE(CURRENT_TIMESTAMP())));

CREATE OR REPLACE TABLE DATABRIDGE_DEV_DB.LSDB_TRANSFM.DC_COLUMN_VALUES
(SCHEMA_LOCATION VARCHAR(100),
TABLE_NAME VARCHAR(100),
COLUMN_NAME VARCHAR(100),
PRIMARY_KEY_VALUE VARCHAR(500),
COLUMN_ID VARCHAR(50),
COLUMN_VALUE VARCHAR ,
PROCESSING_DT TIMESTAMP_NTZ,
CDC_OPERATION_TYPE VARCHAR(1)) ;

CREATE OR REPLACE TABLE DATABRIDGE_DEV_DB.LSDB_TRANSFM.DC_COLUMN_DIFF
(SCHEMA_LOCATION VARCHAR(100),
TABLE_NAME VARCHAR(100),
COLUMN_NAME VARCHAR(100),
PRIMARY_KEY_VALUE VARCHAR(500),
COLUMN_ID VARCHAR(50),
COLUMN_VALUE VARCHAR ,
PROCESSING_DT TIMESTAMP_NTZ) ;



FOR V_TABLE_DETAILS IN C1 DO

    stg_sql_statement := 'INSERT INTO DATABRIDGE_DEV_DB.LSDB_TRANSFM.DC_COLUMN_VALUES
                     (SCHEMA_LOCATION,TABLE_NAME,COLUMN_NAME,PRIMARY_KEY_VALUE,COLUMN_ID,COLUMN_VALUE,PROCESSING_DT,CDC_OPERATION_TYPE)
                    select \'STG\', \''|| V_TABLE_DETAILS.TABLE_NAME_STG || '\',\'' || V_TABLE_DETAILS.COLUMN_NAME_STG 
                            || '\', CONCAT(' || V_TABLE_DETAILS.PRIMARY_KEY_NAME_STG || '), HASH(\'' || V_TABLE_DETAILS.TABLE_NAME_STG 
                            || '\',\'' || V_TABLE_DETAILS.COLUMN_NAME_STG || '\',\'' || V_TABLE_DETAILS.TABLE_NAME_TRANSFM || '\',\'' 
                            || V_TABLE_DETAILS.CORR_COLUMN_NAME_TRANSFM || '\',' || V_TABLE_DETAILS.PRIMARY_KEY_NAME_STG || ',' 
                            || V_TABLE_DETAILS.MODIFIED_DATE_COLUMN_NAME_STG || '),' || V_TABLE_DETAILS.COLUMN_NAME_STG || ',' 
                            || V_TABLE_DETAILS.MODIFIED_DATE_COLUMN_NAME_STG || ' , CDC_OPERATION_TYPE FROM DATABRIDGE_DEV_DB.LSDB_RPL.' 
                            || V_TABLE_DETAILS.TABLE_NAME_STG || ' where date(' || V_TABLE_DETAILS.MODIFIED_DATE_COLUMN_NAME_STG 
                            || ') between \'' || V_BEGIN_DATE || '\' and \'' || V_END_DATE || '\' 
                    QUALIFY ROW_NUMBER() OVER(PARTITION BY ' || V_TABLE_DETAILS.PRIMARY_KEY_NAME_STG || ' ORDER BY CDC_OPERATION_TIME DESC) = 1;' ;
                    
   transfm_sql_statement := 'INSERT INTO DATABRIDGE_DEV_DB.LSDB_TRANSFM.DC_COLUMN_VALUES
                     (SCHEMA_LOCATION,TABLE_NAME,COLUMN_NAME,PRIMARY_KEY_VALUE,COLUMN_ID,COLUMN_VALUE,PROCESSING_DT)
                    select \'TRANSFM\', \''|| V_TABLE_DETAILS.TABLE_NAME_TRANSFM || '\',\'' || V_TABLE_DETAILS.CORR_COLUMN_NAME_TRANSFM 
                    || '\', CONCAT(' || V_TABLE_DETAILS.CORR_PRIMARY_KEY_OF_STG_IN_TRANSFM || '), HASH(\'' || V_TABLE_DETAILS.TABLE_NAME_STG 
                    || '\',\'' || V_TABLE_DETAILS.COLUMN_NAME_STG || '\',\'' || V_TABLE_DETAILS.TABLE_NAME_TRANSFM || '\',\'' 
                    || V_TABLE_DETAILS.CORR_COLUMN_NAME_TRANSFM || '\',' || V_TABLE_DETAILS.CORR_PRIMARY_KEY_OF_STG_IN_TRANSFM || ',' 
                    || V_TABLE_DETAILS.CORR_MODIFIED_DATE_COLUMN_NAME_TRANSFM || '),' || V_TABLE_DETAILS.CORR_COLUMN_NAME_TRANSFM || ',' 
                    || V_TABLE_DETAILS.CORR_MODIFIED_DATE_COLUMN_NAME_TRANSFM || ' FROM DATABRIDGE_DEV_DB.LSDB_TRANSFM.' 
                    || V_TABLE_DETAILS.TABLE_NAME_TRANSFM || ' where date(' || V_TABLE_DETAILS.CORR_MODIFIED_DATE_COLUMN_NAME_TRANSFM 
                    || ') between \'' || V_BEGIN_DATE || '\' and \'' || V_END_DATE || '\' ;' ;
                        
 

EXECUTE IMMEDIATE :stg_sql_statement ;
EXECUTE IMMEDIATE :transfm_sql_statement ;


END FOR ;

CLOSE C1 ;

INSERT INTO DATABRIDGE_DEV_DB.LSDB_TRANSFM.DC_COLUMN_DIFF
SELECT SCHEMA_LOCATION,TABLE_NAME,COLUMN_NAME,PRIMARY_KEY_VALUE,COLUMN_ID,COLUMN_VALUE,PROCESSING_DT FROM DATABRIDGE_DEV_DB.LSDB_TRANSFM.DC_COLUMN_VALUES
WHERE SCHEMA_LOCATION = 'STG'
AND (COLUMN_ID, COLUMN_VALUE) IN (SELECT COLUMN_ID, COLUMN_VALUE FROM DATABRIDGE_DEV_DB.LSDB_TRANSFM.DC_COLUMN_VALUES WHERE SCHEMA_LOCATION = 'STG' AND CDC_OPERATION_TYPE <> 'D'
                                                MINUS
                                SELECT COLUMN_ID, COLUMN_VALUE FROM DATABRIDGE_DEV_DB.LSDB_TRANSFM.DC_COLUMN_VALUES WHERE SCHEMA_LOCATION = 'TRANSFM') ;                                               
INSERT INTO DATABRIDGE_DEV_DB.LSDB_TRANSFM.DC_COLUMN_DIFF
SELECT SCHEMA_LOCATION,TABLE_NAME,COLUMN_NAME,PRIMARY_KEY_VALUE,COLUMN_ID,COLUMN_VALUE,PROCESSING_DT FROM DATABRIDGE_DEV_DB.LSDB_TRANSFM.DC_COLUMN_VALUES
WHERE SCHEMA_LOCATION = 'TRANSFM'
AND (COLUMN_ID, COLUMN_VALUE) IN (SELECT COLUMN_ID, COLUMN_VALUE FROM DATABRIDGE_DEV_DB.LSDB_TRANSFM.DC_COLUMN_VALUES WHERE SCHEMA_LOCATION = 'TRANSFM'
                                                MINUS
                                SELECT COLUMN_ID, COLUMN_VALUE FROM DATABRIDGE_DEV_DB.LSDB_TRANSFM.DC_COLUMN_VALUES WHERE SCHEMA_LOCATION = 'STG' AND CDC_OPERATION_TYPE <> 'D') ;                

Return 'Periodic column value check successfully completed' ;

END;
$$ ;




