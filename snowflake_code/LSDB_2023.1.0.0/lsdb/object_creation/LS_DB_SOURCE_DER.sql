--select distinct DER_REFERENCE_TYPE from $$TGT_DB_NAME.$$LSDB_TRANSFM.LS_DB_SOURCE


-- ALTER TABLE $$TGT_DB_NAME.$$LSDB_TRANSFM.LS_DB_SOURCE ADD COLUMN DER_REFERENCE_TYPE TEXT;

-- call $$TGT_DB_NAME.$$LSDB_TRANSFM.PRC_LS_DB_SOURCE_DER();


	
-- USE SCHEMA $$TGT_DB_NAME.$$LSDB_TRANSFM;
CREATE OR REPLACE PROCEDURE $$TGT_DB_NAME.$$LSDB_TRANSFM.PRC_LS_DB_SOURCE_DER()
RETURNS VARCHAR NOT NULL
LANGUAGE SQL
AS
$$
DECLARE

CURRENT_TS_VAR TIMESTAMP;

BEGIN 

CURRENT_TS_VAR := CURRENT_TIMESTAMP();



-- delete from $$TGT_DB_NAME.$$LSDB_TRANSFM.LS_DB_ETL_CONFIG  where TARGET_TABLE_NAME='LS_DB_SOURCE_DER';
-- delete from $$TGT_DB_NAME.$$LSDB_TRANSFM.LS_DB_DATA_PROCESSING_DTL_TBL  where TARGET_TABLE_NAME='LS_DB_SOURCE_DER';
/*
ALTER TABLE $$TGT_DB_NAME.$$LSDB_TRANSFM.LS_DB_SOURCE ADD COLUMN DER_REFERENCE_TYPE TEXT;
*/






insert into $$TGT_DB_NAME.$$LSDB_TRANSFM.LS_DB_ETL_CONFIG (ROW_WID,TARGET_TABLE_NAME,PARAM_NAME)

select ROW_WID,TARGET_TABLE_NAME,PARAM_NAME from 
(select coalesce((select max( ROW_WID) from $$TGT_DB_NAME.$$LSDB_TRANSFM.LS_DB_ETL_CONFIG)+1,1) ROW_WID,'LS_DB_SOURCE_DER' AS TARGET_TABLE_NAME,'CDC_EXTRACT_TS_LB' PARAM_NAME
 union all select coalesce((select max( ROW_WID) from $$TGT_DB_NAME.$$LSDB_TRANSFM.LS_DB_ETL_CONFIG)+2,1),'LS_DB_SOURCE_DER','CDC_EXTRACT_TS_UB'
) where TARGET_TABLE_NAME not in (select TARGET_TABLE_NAME from $$TGT_DB_NAME.$$LSDB_TRANSFM.LS_DB_ETL_CONFIG)
;

INSERT INTO $$TGT_DB_NAME.$$LSDB_TRANSFM.LS_DB_DATA_PROCESSING_DTL_TBL(ROW_WID,FUNCTIONAL_AREA,ENTITY_NAME,TARGET_TABLE_NAME,LOAD_TS,LOAD_START_TS,LOAD_END_TS,
REC_READ_CNT,REC_PROCESSED_CNT,ERROR_REC_CNT,ERROR_DETAILS,LOAD_STATUS,CHANGED_REC_SET
)
SELECT (select nvl(max(row_wid)+1,1) from $$TGT_DB_NAME.$$LSDB_TRANSFM.LS_DB_DATA_PROCESSING_DTL_TBL where target_table_name='LS_DB_SOURCE_DER'),
	'LSRA','Case','LS_DB_SOURCE_DER',null,CURRENT_TIMESTAMP(),null,null,null,null,null,'In Progress',null;


UPDATE $$TGT_DB_NAME.$$LSDB_TRANSFM.LS_DB_ETL_CONFIG
SET PARAM_VALUE= nvl((SELECT LOAD_TS from $$TGT_DB_NAME.$$LSDB_TRANSFM.LS_DB_DATA_PROCESSING_DTL_TBL 
						WHERE TARGET_TABLE_NAME='LS_DB_SOURCE_DER' 
						AND LOAD_STATUS = 'Completed' ORDER BY ROW_WID DESC limit 1),to_timestamp('1900-01-01','YYYY-MM-DD'))
WHERE TARGET_TABLE_NAME = 'LS_DB_SOURCE_DER'
AND PARAM_NAME='CDC_EXTRACT_TS_LB'
--AND 'I' = (SELECT PARAM_NAME FROM $$TGT_DB_NAME.$$LSDB_TRANSFM.LS_DB_ETL_CONFIG WHERE TARGET_TABLE_NAME ='LOAD_CONTROL')
;


UPDATE $$TGT_DB_NAME.$$LSDB_TRANSFM.LS_DB_ETL_CONFIG
SET PARAM_VALUE= (select max(load_ts) from $$TGT_DB_NAME.$$LSDB_TRANSFM.LS_DB_SOURCE)
WHERE TARGET_TABLE_NAME = 'LS_DB_SOURCE_DER'
AND PARAM_NAME='CDC_EXTRACT_TS_UB'
--AND 'I' = (SELECT PARAM_NAME FROM $$TGT_DB_NAME.$$LSDB_TRANSFM.LS_DB_ETL_CONFIG WHERE TARGET_TABLE_NAME ='LOAD_CONTROL')
;

DROP TABLE IF EXISTS $$TGT_DB_NAME.$$LSDB_TRANSFM.LS_DB_SOURCE_CASE_QFC;
CREATE TEMPORARY TABLE  $$TGT_DB_NAME.$$LSDB_TRANSFM.LS_DB_SOURCE_CASE_QFC AS
select distinct ari_rec_id
FROM 
	$$TGT_DB_NAME.$$LSDB_TRANSFM.LS_DB_SOURCE 
	
	where load_ts > (SELECT PARAM_VALUE FROM 
$$TGT_DB_NAME.$$LSDB_TRANSFM.LS_DB_ETL_CONFIG WHERE TARGET_TABLE_NAME = 'LS_DB_SOURCE_DER'
AND PARAM_NAME='CDC_EXTRACT_TS_LB')  and

load_ts <=  (SELECT PARAM_VALUE FROM 
$$TGT_DB_NAME.$$LSDB_TRANSFM.LS_DB_ETL_CONFIG WHERE TARGET_TABLE_NAME = 'LS_DB_SOURCE_DER'
AND PARAM_NAME='CDC_EXTRACT_TS_UB') AND LS_DB_SOURCE.EXPIRY_DATE = TO_DATE('9999-31-12','YYYY-DD-MM')
;	



UPDATE $$TGT_DB_NAME.$$LSDB_TRANSFM.LS_DB_SOURCE   
SET LS_DB_SOURCE.DER_REFERENCE_TYPE=CASE WHEN LENGTH(LS_DB_SOURCE_TMP.DER_REFERENCE_TYPE ) >= 4000 THEN SUBSTRING(LS_DB_SOURCE_TMP.DER_REFERENCE_TYPE,1,3996) || ' ...'
	ELSE LS_DB_SOURCE_TMP.DER_REFERENCE_TYPE END
FROM (
WITH CD_WITH AS (
select CD_ID,CD,DE,LN from 
(
SELECT distinct LSMV_CODELIST_NAME.CODELIST_ID CD_ID,LSMV_CODELIST_CODE.CODE CD,LSMV_CODELIST_DECODE.DECODE DE,LSMV_CODELIST_DECODE.LANGUAGE_CODE LN 
,row_number() over(partition by LSMV_CODELIST_NAME.CODELIST_ID,LSMV_CODELIST_CODE.CODE,LSMV_CODELIST_DECODE.LANGUAGE_CODE 
                   order by LSMV_CODELIST_NAME.CDC_OPERATION_TIME  DESC,LSMV_CODELIST_CODE.CDC_OPERATION_TIME DESC,LSMV_CODELIST_DECODE.CDC_OPERATION_TIME DESC) rank


                                                                                      FROM
                                                                                      (
                                                                                                     SELECT RECORD_ID,CODELIST_ID,CDC_OPERATION_TIME,ROW_NUMBER() OVER ( PARTITION BY RECORD_ID ORDER BY CDC_OPERATION_TIME DESC) RANK
                                                                                                     FROM $$STG_DB_NAME.$$LSDB_RPL.LSMV_CODELIST_NAME WHERE codelist_id IN ('9060')
                                                                                      ) LSMV_CODELIST_NAME JOIN
                                                                                      (
                                                                                                     SELECT RECORD_ID,      CODE,   FK_CL_NAME_REC_ID,CDC_OPERATION_TIME              ,ROW_NUMBER() OVER ( PARTITION BY RECORD_ID ORDER BY CDC_OPERATION_TIME DESC) RANK
                                                                                                     FROM $$STG_DB_NAME.$$LSDB_RPL.LSMV_CODELIST_CODE
                                                                                      ) LSMV_CODELIST_CODE  ON LSMV_CODELIST_NAME.RECORD_ID=LSMV_CODELIST_CODE.FK_CL_NAME_REC_ID
                                                                                      AND LSMV_CODELIST_NAME.RANK=1 AND LSMV_CODELIST_CODE.RANK=1
                                                                                      JOIN 
                                                                                      (
                                                                                                     SELECT RECORD_ID,LANGUAGE_CODE, DECODE,            FK_CL_CODE_REC_ID              ,CDC_OPERATION_TIME,ROW_NUMBER() OVER ( PARTITION BY RECORD_ID ORDER BY CDC_OPERATION_TIME DESC) RANK
                                                                                                     FROM $$STG_DB_NAME.$$LSDB_RPL.LSMV_CODELIST_DECODE where LANGUAGE_CODE='en'
                                                                                      ) LSMV_CODELIST_DECODE ON LSMV_CODELIST_CODE.RECORD_ID = LSMV_CODELIST_DECODE.FK_CL_CODE_REC_ID
                                                                                      AND LSMV_CODELIST_DECODE.RANK=1) where rank=1 


)


SELECT ARI_REC_ID,
		LISTAGG(DER_REFERENCE_TYPE,' | ') WITHIN GROUP (ORDER BY RECORD_ID) AS  DER_REFERENCE_TYPE 
		FROM 
		(SELECT  
		ARI_REC_ID,
		RECORD_ID,
		CD_WITH.DE || ': ' || COALESCE(LS_DB_SOURCE.IDENTIFICATION_NUMBER,'-') AS DER_REFERENCE_TYPE
		FROM $$TGT_DB_NAME.$$LSDB_TRANSFM.LS_DB_SOURCE Join CD_WITH on 
		LS_DB_SOURCE.REFERENCE_TYPE=CD_WITH.CD
		where ARI_REC_ID in (select ari_rec_id from $$TGT_DB_NAME.$$LSDB_TRANSFM.LS_DB_SOURCE_CASE_QFC)
					and EXPIRY_DATE = TO_DATE('9999-31-12','YYYY-DD-MM')
		
		) group  by ARI_REC_ID
) LS_DB_SOURCE_TMP
    WHERE LS_DB_SOURCE.ari_rec_id = LS_DB_SOURCE_TMP.ari_rec_id	
	AND LS_DB_SOURCE.EXPIRY_DATE = TO_DATE('9999-31-12','YYYY-DD-MM'); 





UPDATE $$TGT_DB_NAME.$$LSDB_TRANSFM.LS_DB_DATA_PROCESSING_DTL_TBL
SET LOAD_END_TS = current_timestamp,
LOAD_TS=(select max(LOAD_TS) from $$TGT_DB_NAME.$$LSDB_TRANSFM.LS_DB_SOURCE),
LOAD_STATUS='Completed'
where target_table_name='LS_DB_SOURCE_DER'
and LOAD_STATUS = 'In Progress'
and LOAD_START_TS=(select max(LOAD_START_TS) from $$TGT_DB_NAME.$$LSDB_TRANSFM.LS_DB_DATA_PROCESSING_DTL_TBL where target_table_name='LS_DB_SOURCE_DER'
and LOAD_STATUS = 'In Progress') ;	
 


 RETURN 'LS_DB_SOURCE_DER Update completed';

EXCEPTION
  WHEN OTHER THEN
    LET LINE := SQLCODE || ': ' || SQLERRM;
UPDATE $$TGT_DB_NAME.$$LSDB_TRANSFM.LS_DB_DATA_PROCESSING_DTL_TBL set ERROR_DETAILS=:line,LOAD_STATUS = 'Error' WHERE target_table_name='LS_DB_SOURCE_DER'
and LOAD_STATUS = 'In Progress'
;



END;
$$
;	

/*

 CREATE or replace TASK $$TGT_DB_NAME.$$LSDB_TRANSFM.TSK_LS_DB_SOURCE
  WAREHOUSE = EXTRASMALL
  Schedule = '15 minute'
AS
EXECUTE IMMEDIATE $$
DECLARE
    id int;
BEGIN
  CALL $$TGT_DB_NAME.$$LSDB_TRANSFM.PRC_LS_DB_SOURCE();
  CALL $$TGT_DB_NAME.$$LSDB_TRANSFM.PRC_LS_DB_SOURCE_DER();
END;
$$
;

ALTER TASK $$TGT_DB_NAME.$$LSDB_TRANSFM.TSK_LS_DB_SOURCE RESUME; 
 
 
 */
 
 
 
 
 
 